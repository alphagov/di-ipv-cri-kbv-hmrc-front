openapi: "3.0.1"
info:
  title: "HMRC KBV Credential Issuer Private Api"
  version: "1.0"

paths:
  /authorization:
    get:
      parameters:
        - $ref: "#/components/parameters/SessionHeader"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationResponse"
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: "403 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /session:
    post:
      summary: "IP address of the client."
      parameters:
        - in: header
          name: "X-Forwarded-For"
          schema:
            type: string
            format: string
          required: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Authorization"
            examples:
              201:
                description: "Example body to receive a HTTP 201 response"
                value:
                  session_id: "1fbc5730-9d17-416d-b2ca-0be90e1e93f5"
              400:
                description: "Example body to receive a HTTP 400 response"
                value:
                  session_id: "fad21bea-bce9-4aa7-8889-d50c7d26616e"
              500:
                description: "Example body to receive a HTTP 500 response"
                value:
                  session_id: "f27b8afc-90ef-4e0f-83ad-00a2f5692590"
        required: true
      responses:
        "201":
          description: "201 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
              examples:
                201:
                  summary: "An example of a successful response message"
                  value:
                    session_id: "1fbc5730-9d17-416d-b2ca-0be90e1e93f5"
                    state: "string"
                    redirect_uri: "string"
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /fetchquestions:
    post:
      description: >
        Endpoint provided by the private api gateway, triggers the retrival of questions for the NINO supplied previously in the shared claims of the JWT.
        Returns 200 if the matching NINO has sufficient questions,
        else returns 400 with an oauth error containing invalid_request if there are not sufficient questions.
      parameters:
        - $ref: "#/components/parameters/SessionHeader"
      requestBody:
        content:
          application/json: {}
        required: false
      responses:
        "200":
          description: There are sufficient questions
          content:
            application/json: {}
        "204":
          description: Request already retrieved, but continue the user has sufficient questions (User back button recovery path)
          content:
            application/json: {}
        "400":
          description: Insufficient questions for this NINO
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommmonExpressOauthAxiosError"
              example:
                oauth_error:
                    error: "invalid_request"
                    error_description: "Invalid request"
        "403":
          description: Session not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommmonExpressOauthAxiosError"
              example:
                oauth_error:
                    error: "access_denied"
                    error_description: "Access denied"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommmonExpressOauthAxiosError"
        "504":
          description: Server error caused by a network issue with the remote api (Timeout/Unexpected Status Codes)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommmonExpressOauthAxiosError"
              example:
                oauth_error:
                    error: "server_error"
                    error_description: "Unexpected server error"

  /question:
    get:
      parameters:
        - $ref: "#/components/parameters/SessionHeader"
      responses:
        "200":
          description: "Questions returned"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Question"
        "204":
          description: "No more questions"
        "400":
          description: "Client Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /answer:
    post:
      parameters:
        - $ref: "#/components/parameters/SessionHeader"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Answer"
        required: true
      responses:
        "202":
          description: "Answered submitted"
        "404":
          description: "Does not exist"
        "422":
          description: "Question already answered"
        "400":
          description: "Client Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  parameters:
    SessionHeader:
      name: "session-id"
      in: header
      description: "A UUID generated by the Session API to act as a primary key for the Session in DynamoDB"
      required: true
      schema:
        type: "string"
      examples:
        200:
          value: "1fbc5730-9d17-416d-b2ca-0be90e1e93f5"

  schemas:
    Authorization:
      required:
        - "client_id"
        - "request"
      type: "object"
      properties:
        client_id:
          type: "string"
          minLength: 1
          example: "ipv-stub"
        request:
          type: "string"
    AuthorizationResponse:
      required:
        - "redirect_uri"
        - "code"
        - "state"
      type: "object"
      properties:
        code:
          type: "string"
          example: "1fbc5730-9d17-416d-b2ca-0be90e1e93f5"
        state:
          type: "string"
          example: "state"
          minLength: 1
        redirect_uri:
          type: "string"
          format: "uri"
          example: "https://di-ipv-core-stub.london.cloudapps.digital/callback"
    Error:
      title: "Error Schema"
      type: "object"
      properties:
    Session:
      required:
        - "session_id"
        - "state"
        - "redirect_uri"
      type: "object"
      properties:
        session_id:
          type: "string"
        state:
          type: "string"
        redirect_uri:
          type: "string"
    Question:
      type: "object"
      properties:
        questionKey:
          type: "string"
          example: "rti-p60-payment-for-year"
        info:
          type: "object"
          properties:
            currentTaxYear:
              type: "string"
              example: "2021/2022"
            previousTaxYear:
              type: "string"
              example: "2020/2021"
    Answer:
      required:
        - "questionKey"
        - "value"
      type: "object"
      properties:
        questionKey:
          description: The unique identifier for the question
          type: "string"
          example: "rti-p60-payment-for-year"

        value:
          description: Answer provided by the user
          type: "string"
          example: "400.94"
