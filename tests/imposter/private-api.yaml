openapi: "3.0.1"
info:
  title: "HMRC KBV Credential Issuer Private Api Specification"
  version: "2.0"

paths:
  /authorization:
    get:
      parameters:
        - in: query
          name: request
          schema:
            type: string
          description: "Encrypted JWT Session Object"
          example: "eyAiBiCKD1EiFCGlHmIiJiKBLjM2N0ONPiQaR...."
        - in: query
          name: client_id
          schema:
            type: string
          description:  "client identifier"
          example: "ipv-core-stub"

      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationResponse"
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: "403 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /session:
    post:
      summary: "IP address of the client."
      parameters:
        - in: header
          name: "X-Forwarded-For"
          schema:
            type: string
            format: string
          required: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Authorization"
        required: true
      responses:
        "201":
          description: "201 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
              examples:
                201:
                  summary: "Session created response"
                  value:
                    session_id: "1fbc5730-9d17-416d-b2ca-0be90e1e93f5"
                    state: "string"
                    redirect_uri: "string"
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /fetchquestions:
    get:
      parameters:
        - $ref: "#/components/parameters/SessionHeader"
      responses:
        "200":
          description: "Triggers the retrival of questions for the previously supplied NINO, returns if the NINO has sufficient or insufficient matching questions"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FetchQuestionsResponse"
              examples:
                ZeroQuestions:
                  value:
                    status: insufficient_questions
                QuestionsFailedFilterRules:
                  value:
                    status: insufficient_questions                    
                QuestionsPassedFilterRules:
                  value:
                    status: sufficient_questions

        "204":
          description: "Request already retrieved, but continue (User back button recoverery path)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FetchQuestionsResponse"
              examples:
                ZeroQuestions:
                  value:
                    status: insufficient_questions
                QuestionsFailedFilterRules:
                  value:
                    status: insufficient_questions                    
                QuestionsPassedFilterRules:
                  value:
                    status: sufficient_questions           

        "403":
          description: "Session Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommmonExpressOauthAxiosError"
              example:
                oauth_error:
                    error: "access_denied"
                    error_description: "Access denied"
        "500":
          description: "Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommmonExpressOauthAxiosError"
        "504":
          description: "Server Error caused by a network issue with the remote api (Timeout/Unexpected Status Codes)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommmonExpressOauthAxiosError"   
              example:
                oauth_error:
                    error: "server_error"
                    error_description: "Unexpected server error"

  /question:
    get:
      parameters:
        - $ref: "#/components/parameters/SessionHeader"
      responses:
        "200":
          description: "Single Question Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionResponse"
              examples:
                P60CurrentYear:
                  value:
                    questionKey: "rti-p60-payment-for-year"
                    info:
                      currentTaxYear: "2021/2022"
                P60CurrentYearOrPrevious:
                  value:
                    questionKey: "rti-p60-payment-for-year"
                    info:
                      currentTaxYear: "2021/2022"
                      previousTaxYear: "2020/2021"                      
                TaxCreditAmount:
                  value:
                    questionKey: "tc-amount"

          
        "204":
          description: "No more questions (User back button recoverery path)"
        "403":
          description: "Session Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommmonExpressOauthAxiosError"   
              example:
                oauth_error:
                    error: "access_denied"
                    error_description: "Access denied"          
        "500":
          description: "Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommmonExpressOauthAxiosError"                        

  /answer:
    post:
      parameters:
        - $ref: "#/components/parameters/SessionHeader"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnswerPost"
        required: true
      responses:
        "200":
          description: "Question answer/sequence completed - result stored"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnswerResponse"
              example: 
                response: "Question answer/sequence completed - result stored"
        "202":
          description: "Submitted answer saved"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnswerResponse"
              example: 
                response: "Submitted answer saved"          
        "204":
          description: "Question already answered, but continue (User back button recoverery path)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnswerResponse"
              example: 
                response: "Continue"
        "400":
          description: "Client Submission Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommmonExpressOauthAxiosError"   
              example:
                oauth_error:
                    error: "invalid_request"
                    error_description: "Invalid request"
        "409":
          description: "Error with answer key summitted - e.g unknown question key / question key answered out of sequence - (unrecoverable)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommmonExpressOauthAxiosError"   
              example:
                oauth_error:
                    error: "invalid_request"
                    error_description: "Invalid request"                      
        "500":
          description: "Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommmonExpressOauthAxiosError"   
              example:
                oauth_error:
                    error: "server_error"
                    error_description: "Unexpected server error"
        "504":
          description: "Server Error caused by a network issue with the remote api (Timeout/Unexpected Status Codes)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommmonExpressOauthAxiosError"   
              example:
                oauth_error:
                    error: "server_error"
                    error_description: "Unexpected server error"

components:
  parameters:
    SessionHeader:
      name: "session-id"
      in: header
      description: "A UUID generated by the Session API to act as a primary key for the Session in DynamoDB"
      required: true
      schema:
        type: "string"
      examples:
        200:
          value: "1fbc5730-9d17-416d-b2ca-0be90e1e93f5"

  schemas:
    Authorization:
      required:
        - "client_id"
        - "request"
      type: "object"
      properties:
        client_id:
          description: "client identifier"
          type: "string"
          minLength: 1
          example: "ipv-core-stub"
        request:
          description: "Encrypted JWT Session Object"
          type: "string"
          example: "eyAiBiCKD1EiFCGlHmIiJiKBLjM2N0ONPiQaR...."
    AuthorizationResponse:
      required:
        - "redirect_uri"
        - "code"
        - "state"
      type: "object"
      properties:
        code:
          type: "string"
          example: "1fbc5730-9d17-416d-b2ca-0be90e1e93f5"
        state:
          type: "string"
          example: "state"
          minLength: 1
        redirect_uri:
          type: "string"
          format: "uri"
          example: "https://di-ipv-core-stub.london.cloudapps.digital/callback"

    Error:
      title: "Error Schema"
      type: "object"
      properties:

    CommmonExpressOauthAxiosError:
      title: "Common Express Oauth Error Schema"
      description: "Error Format expected by CommonExpress Error Handler"
      type: "object"
      properties:
        oauth_error:
          type: "object"
          properties:
            error:
              type: "string"
              example: "server_error"
            error_description:
              type: "string"
              example: "Unexpected server error"

    Session:
      required:
        - "session_id"
        - "state"
        - "redirect_uri"
      type: "object"
      properties:
        session_id:
          type: "string"
        state:
          type: "string"
        redirect_uri:
          type: "string"

    FetchQuestionsResponse:
      type: "object"
      properties:
        status:
          type: "string"
          nullable: false
          enum: [sufficient_questions, insufficient_questions]
          example: sufficient_questions

    QuestionResponse:
      type: "object"
      properties:
        questionKey:
          description: The unique identifier for the question
          type: "string"
          example: "rti-p60-payment-for-year"
        info:
          description: Not present for all question keys
          type: "object"
          nullable: true
          properties:
            currentTaxYear:
              type: "string"
              example: "2021/2022"
            previousTaxYear:
              description: May not be present - dependant on tax year rules
              type: "string"
              nullable: true
              example: "2020/2021"

    AnswerPost:
      required:
        - "key"
        - "value"
      type: "object"
      properties:
        questionKey:
          description: The unique identifier for the question
          type: "string"
          example: "rti-p60-payment-for-year"
        value:
          description: Answer provided by the user
          type: "string"
          example: "400.94"

    AnswerResponse:
      type: "object"
      properties:
        response:
          description: Human readable indication of the current state
          type: "string"
          example: "Answer Saved"
